import unittest
from unittest import TestCase
from unittest.mock import patch

import bitcoin


class TestBitCoin(TestCase):

    @patch('bitcoin.get_rate_json')
    def test_convert_dollars(self, mock_bitcoin_api):

        mock_bitcoin_api.return_value = {
    "bpi": {
        "EUR": {
            "code": "EUR",
            "description": "Euro",
            "rate": "815.8994",
            "rate_float": 815.8994,
            "symbol": "&euro;"
        },
        "GBP": {
            "code": "GBP",
            "description": "British Pound Sterling",
            "rate": "677.4879",
            "rate_float": 677.4879,
            "symbol": "&pound;"
        },
        "USD": {
            "code": "USD",
            "description": "United States Dollar",
            "rate": "728.4816",
            "rate_float": 728.4816,
            "symbol": "&#36;"
        }
    },
    "chartName": "Bitcoin",
    "disclaimer": "This data was generated by creating random numbers and mimics the Coinbase API JSON response structure. It is NOT real data. DO NOT USE THIS TO TRADE CRYPTOCURRENCY!",
    "time": {
        "updatedISO": "2023-02-14T20:16:14.370072"
    }
}

        expected_dollars = 364240.8
        dollars = bitcoin.convert_bitcoin_to_dollars(500)
        self.assertAlmostEqual(expected_dollars, dollars)


if __name__ == '__main__':
    unittest.main()